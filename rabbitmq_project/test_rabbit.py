# test_rabbit.py
import pika
import time
import threading


def test_rabbitmq():
    print("üêá ===== –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢ RABBITMQ ===== üêá")
    connection = None
    try:
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        print("1. –ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ –Ω–∞ localhost...")
        connection = pika.BlockingConnection(
            pika.ConnectionParameters(
                host='localhost',
                port=5672,
                credentials=pika.PlainCredentials('guest', 'guest')  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
            )
        )
        channel = connection.channel()
        print("   ‚úÖ –£–°–ü–ï–•: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
        print("2. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å 'test_queue'...")
        channel.queue_declare(queue='test_queue')
        print("   ‚úÖ –û—á–µ—Ä–µ–¥—å —Å–æ–∑–¥–∞–Ω–∞!")

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("3. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        message_body = '–ü—Ä–∏–≤–µ—Ç –æ—Ç PyCharm –∏ Docker!'
        channel.basic_publish(
            exchange='',
            routing_key='test_queue',
            body=message_body,
            properties=pika.BasicProperties(delivery_mode=2)  # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        )
        print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '{message_body}'")

        # 4. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
        print("4. –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ callback —Ñ—É–Ω–∫—Ü–∏–∏)
        received_messages = []

        def callback(ch, method, properties, body):
            print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: '{body.decode()}'")
            received_messages.append(body.decode())
            ch.basic_ack(delivery_tag=method.delivery_tag)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            ch.basic_cancel(consumer_tag=method.consumer_tag)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å
        channel.basic_consume(queue='test_queue', on_message_callback=callback)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        def consume_with_timeout():
            try:
                channel.start_consuming()
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")

        consumer_thread = threading.Thread(target=consume_with_timeout)
        consumer_thread.daemon = True
        consumer_thread.start()

        # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
        timeout = 5
        for i in range(timeout):
            if received_messages:
                break
            time.sleep(1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if received_messages:
            print("   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ!")
            if received_messages[0] == message_body:
                print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ '{received_messages[0]}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{message_body}'")
        else:
            print("   ‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - RabbitMQ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            print("   - –ü–æ—Ä—Ç 5672 –∑–∞–∫—Ä—ã—Ç")
            print("   - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏")

    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å RabbitMQ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("   - –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if connection and not connection.is_closed:
            connection.close()
            print("5. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        time.sleep(1)
        print("üêá ===== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===== üêá")


if __name__ == "__main__":
    test_rabbitmq()
    # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    time.sleep(3)